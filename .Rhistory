neighbors(gcitation,v=cybnodes[i],mode="in")$name
keyword_dico[[neighbors(gcitation,v=cybnodes[i],mode="in")$name]]
cybsecorigin=c()
cybsecorigout=c()
cybsecorigall=c()
for(i in cybindexes){
show(i)
neigh = neighbors(gcitation,v=cybnodes[i],mode="in")$name
probas = rep(0,ncol(them_probas));count=0
for(n in 1:length(neigh)){
inds = which(names(keyword_dico==neigh[n]))
if(length(inds)>0){probas=probas+them_probas[inds[1],];count=count+1}
}
if(count>0){probas=probas/count}
if(sum(probas)>0){cybsecorigin=append(cybsecorigin,1-sum(probas^2))}
}
show(i)
neigh = neighbors(gcitation,v=cybnodes[i],mode="in")$name
## second order originality ?
cybsecorigin=c()
cybsecorigout=c()
cybsecorigall=c()
for(i in 1:length(cybnodes)){
show(i)
neigh = neighbors(gcitation,v=cybnodes[i],mode="in")$name
probas = rep(0,ncol(them_probas));count=0
for(n in 1:length(neigh)){
inds = which(names(keyword_dico==neigh[n]))
if(length(inds)>0){probas=probas+them_probas[inds[1],];count=count+1}
}
if(count>0){probas=probas/count}
if(sum(probas)>0){cybsecorigin=append(cybsecorigin,1-sum(probas^2))}
}
cybsecorigin=c()
cybsecorigout=c()
cybsecorigall=c()
for(i in 1:length(cybnodes)){
show(i)
neigh = neighbors(gcitation,v=cybnodes[i],mode="in")$name
show(neigh)
probas = rep(0,ncol(them_probas));count=0
for(n in 1:length(neigh)){
inds = which(names(keyword_dico==neigh[n]))
if(length(inds)>0){probas=probas+them_probas[inds[1],];count=count+1}
}
if(count>0){probas=probas/count}
if(sum(probas)>0){cybsecorigin=append(cybsecorigin,1-sum(probas^2))}
}
cybsecorigin=c()
cybsecorigout=c()
cybsecorigall=c()
for(i in 1:length(cybnodes)){
show(i)
neigh = neighbors(gcitation,v=cybnodes[i],mode="in")$name
show(neigh)
probas = rep(0,ncol(them_probas));count=0
for(n in 1:length(neigh)){
inds = which(names(keyword_dico)==neigh[n])
if(length(inds)>0){probas=probas+them_probas[inds[1],];count=count+1}
}
if(count>0){probas=probas/count}
if(sum(probas)>0){cybsecorigin=append(cybsecorigin,1-sum(probas^2))}
}
cybsecorigout=c()
#cybsecorigall=c()
for(i in 1:length(cybnodes)){
show(i)
neigh = neighbors(gcitation,v=cybnodes[i],mode="out")$name
show(neigh)
probas = rep(0,ncol(them_probas));count=0
for(n in 1:length(neigh)){
inds = which(names(keyword_dico)==neigh[n])
if(length(inds)>0){probas=probas+them_probas[inds[1],];count=count+1}
}
if(count>0){probas=probas/count}
if(sum(probas)>0){cybsecorigout=append(cybsecorigout,1-sum(probas^2))}
}
dat = data.frame(orig=c(cybsecorigin,cybsecorigout),type=c(rep("in",length(cybsecorigin),rep("out",length(cybsecorigout)))
)
)
c(cybsecorigin,cybsecorigout)
dat = data.frame(orig=c(cybsecorigin,cybsecorigout),type=c(rep("in",length(cybsecorigin)),rep("out",length(cybsecorigout)))
)
dat
g=ggplot(dat, aes(x=orig, fill=type)) + geom_density(alpha=.3)
ggplot(dat, aes(x=orig, fill=type)) + geom_density(alpha=.3)
sdat=as.tbl(dat)%>%group_by(type)%>%summarise(mean=mean(orig))
ggplot(dat, aes(x=orig, fill=type)) + geom_density(alpha=.3)+geom_vline(data=sdat, aes(xintercept=mean,  colour=cyb),linetype="dashed", size=1)
ggplot(dat, aes(x=orig, fill=type)) + geom_density(alpha=.3)+geom_vline(data=sdat, aes(xintercept=mean,  colour=type),linetype="dashed", size=1)
is.numeric("12")
as.numeric("12")
as.numeric("12mph")
is.numeric(as.numeric("12mph"))
gsub(x = "30 mph"," ","")
s=gsub(x = "30 mph"," ","")
s=gsub(x = s," ","")
s
sr=gsub(x = s," ","")
normalizedSpeed <- function(s){
if(!is.na(as.numeric(s))){return(as.numeric(s))}
sr=gsub(x = s," ","")
if(grepl("mph",sr)){return(as.numeric(gsub(x = sr,"mph",""))*1.609)}
else{return(NA)}
}
normalizedSpeed("30 mph")
normalizedSpeed("30mph")
normalizedSpeed("30")
normalizedSpeed(30)
raw <- raster(paste0(Sys.getenv("CN_HOME"),"/Data/PopulationDensity/raw/density_wgs84.tif"))
library(raster)
raw <- raster(paste0(Sys.getenv("CN_HOME"),"/Data/PopulationDensity/raw/density_wgs84.tif"))
raw
xyFromCell()
xyFromCell
xyFromCell(raw,1230)
library(RPostgreSQL)
library(rgeos)
con = dbConnect(dbDriver("PostgreSQL"), dbname="osm_simpl",user="Juste",host="localhost" )
query = dbSendQuery(con,"SELECT ST_AsText(geography) AS geom FROM links;")
data = fetch(query,n=-1)
geoms = data$geom
roads=list()
for(i in 1:length(geoms)){
r=readWKT(geoms[i])@lines[[1]];r@ID=as.character(i)
roads[[i]]=r
}
splines = SpatialLines(LinesList = roads)
plot(splines)
library(igraph)
help("difference")
real_raw = read.csv(
paste0(Sys.getenv("CN_HOME"),'/Results/Morphology/Density/Numeric/20150806_europe50km_10kmoffset_100x100grid.csv'),
sep=";"
)
real =real_raw[!is.na(real_raw[,3])&!is.na(real_raw[,4])&!is.na(real_raw[,5])&!is.na(real_raw[,6])&!is.na(real_raw[,7])&!is.na(real_raw[,8])&!is.na(real_raw[,9]),]
for(j in 1:ncol(real)){real[,j]=(real[,j]-min(real[,j]))/(max(real[,j])-min(real[,j]))}
library(RColorBrewer)
library(ggplot2)
library(MASS)
source(paste0(Sys.getenv('CN_HOME'),'/Models/Utils/R/plots.R'))
real_raw = read.csv(
paste0(Sys.getenv("CN_HOME"),'/Results/Morphology/Density/Numeric/20150806_europe50km_10kmoffset_100x100grid.csv'),
sep=";"
)
real =real_raw[!is.na(real_raw[,3])&!is.na(real_raw[,4])&!is.na(real_raw[,5])&!is.na(real_raw[,6])&!is.na(real_raw[,7])&!is.na(real_raw[,8])&!is.na(real_raw[,9]),]
real_ind = real[5*(0:(nrow(real)/5))+1,]
names(real)
indic="moran"
p = ggplot(data.frame(x=real$y,y=1-real$x,density_max=real[[indic]]),aes(x=x,y=y,colour=density_max))
p+geom_point()+xlab("")+ylab("")+labs(title=indic)+scale_colour_gradientn(colours=rev(rainbow(5)))+scale_y_continuous(breaks=NULL)+scale_x_continuous(breaks=NULL)
indic="distance"
p = ggplot(data.frame(x=real$y,y=1-real$x,density_max=real[[indic]]),aes(x=x,y=y,colour=density_max))
p+geom_point()+xlab("")+ylab("")+labs(title=indic)+scale_colour_gradientn(colours=rev(rainbow(5)))+scale_y_continuous(breaks=NULL)+scale_x_continuous(breaks=NULL)
map<-function(indic){
d=data.frame(x=real$y,y=1-real$x);d[[indic]]=real[[indic]]
p=ggplot(d,aes_string(x="x",y="y",colour=indic))
p+geom_point(shape=".",size=2)+xlab("")+ylab("")+labs(title=indic)+scale_colour_gradientn(colours=rev(rainbow(5)))+scale_y_continuous(breaks=NULL)+scale_x_continuous(breaks=NULL)
}
# multiplots
indics=c("moran","distance","entropy","slope")
plots=list();k=1
for(indic in indics){
plots[[k]]=map(indic)
k=k+1
}
multiplot(plotlist=plots,cols=2)
map<-function(indic){
d=data.frame(x=real$y,y=1-real$x);d[[indic]]=real[[indic]]
p=ggplot(d,aes_string(x="x",y="y",colour=indic))
p+geom_point(shape=".",size=1)+xlab("")+ylab("")+labs(title=indic)+scale_colour_gradientn(colours=rev(rainbow(5)))+scale_y_continuous(breaks=NULL)+scale_x_continuous(breaks=NULL)
}
# multiplots
indics=c("moran","distance","entropy","slope")
plots=list();k=1
for(indic in indics){
plots[[k]]=map(indic)
k=k+1
}
multiplot(plotlist=plots,cols=2)
names(real)
vars = c(3,4,5,6)
ccoef=c()
for(k in 2:15){
show(k)
clust = kmeans(real[,vars],k,iter.max=30)
#ccoef=append(ccoef,sum(clust$withinss/clust$size)/k)# mean cluster size
ccoef=append(ccoef,clust$tot.withinss/clust$betweenss)# clust coef
plot(real$y,1-real$x,col=clust$cluster,pch='.',cex=3,main=paste0('k=',k),xlab="",ylab="",xaxt='n',yaxt='n')
}
ccoef
vars = c(3,4,5,6)
ccoef=c()
for(k in 2:15){
show(k)
clust = kmeans(real[,vars],k,iter.max=30)
#ccoef=append(ccoef,sum(clust$withinss/clust$size)/k)# mean cluster size
ccoef=append(ccoef,clust$tot.withinss/(clust$betweenss+clust$tot.withinss))# clust coef
plot(real$y,1-real$x,col=clust$cluster,pch='.',cex=3,main=paste0('k=',k),xlab="",ylab="",xaxt='n',yaxt='n')
}
ccoef
vars = c(3,4,5,6)
ccoef=c()
par(mfrow=c(3,3))
for(k in 2:11){
show(k)
clust = kmeans(real[,vars],k,iter.max=30)
#ccoef=append(ccoef,sum(clust$withinss/clust$size)/k)# mean cluster size
withinProp=clust$tot.withinss/(clust$betweenss+clust$tot.withinss)
ccoef=append(ccoef,withinProp)# clust coef
plot(real$y,1-real$x,col=clust$cluster,pch='.',cex=3,main=paste0('k=',k,' ; withinProp=',withinProp),xlab="",ylab="",xaxt='n',yaxt='n')
}
vars = c(3,4,5,6)
ccoef=c()
par(mfrow=c(3,3))
for(k in 3:11){
show(k)
clust = kmeans(real[,vars],k,iter.max=30)
#ccoef=append(ccoef,sum(clust$withinss/clust$size)/k)# mean cluster size
withinProp=clust$tot.withinss/(clust$betweenss+clust$tot.withinss)
ccoef=append(ccoef,withinProp)# clust coef
plot(real$y,1-real$x,col=clust$cluster,pch='.',cex=3,main=paste0('k=',k,' ; withinProp=',withinProp),xlab="",ylab="",xaxt='n',yaxt='n')
}
shiny::runApp('~/Documents/ComplexSystems/CyberGeo/cybergeo20/Cybergeo20')
help("forceNetwork")
shiny::runApp('~/Documents/ComplexSystems/CyberGeo/cybergeo20/CybergeoNetworks')
runApp('~/Documents/ComplexSystems/CyberGeo/cybergeo20/CybergeoNetworks')
runApp('~/Documents/ComplexSystems/CyberGeo/cybergeo20/CybergeoNetworks')
library(ggplot2)
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n)}
nextDistrib <- function(p){sample(growthRates*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:10){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
}
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:10){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
}
pops
g=ggplot(data.fram(pops,times))
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=times))
times
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:100){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))
mean(p0)
help("geom_density")
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n,mean=0.5,sd = 1)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:100){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend = FALSE)
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend = FALSE)+xlim(c(-1,1))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend = FALSE)+xlim(c(-0.01,0.01))
end(pops)
help(end)
pops[(length(pops)-100):length(pops)]
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n,mean=0.5,sd = 1)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:2){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend = FALSE)
g+geom_density(aes(x=pops,colour=as.character(times)))
g+geom_density(aes(x=pops,colour=as.character(times)))+xlim(c(-10,10))
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n,mean=1.05,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:2){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))+xlim(c(-10,10))
g+geom_density(aes(x=pops,colour=as.character(times)))+xlim(c(-2,10))
for(t in 1:10){
}
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n,mean=1.05,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:10){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))+xlim(c(-2,10))
growthRates<-function(){rnorm(n,mean=1,sd = 0.05)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:10){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))+xlim(c(-2,10))
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n,mean=1.1,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:10){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))+xlim(c(-2,10))
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n,mean=1.1,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:30){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))+xlim(c(-2,10))
g=ggplot(data.frame(pops,times),aes(colour=times))
g+geom_density(aes(x=pops))+xlim(c(-2,10))
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,10))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
n=100000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n,mean=1.1,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:30){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
pops=p0;times=rep(0,n)
p=p0
for(t in 1:50){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
pops=p0;times=rep(0,n)
p=p0
for(t in 1:50){
p=nextDistrib(p)
pops=append(pops,p/mean(p));times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
pops=p0;times=rep(0,n)
p=p0
for(t in 1:50){
p=nextDistrib(p)
pops=append(pops,p-mean(p));times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
p0=runif(n)
growthRates<-function(){rnorm(n,mean=1.1,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:50){
p=nextDistrib(p)
pops=append(pops,p-mean(p));times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
pops=p0;times=rep(0,n)
p=p0
for(t in 1:50){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
n=100000
#p0 = rlnorm(n)
p0=runif(n)
growthRates<-function(){rnorm(n,mean=1.1,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:100){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
hist(p,plot=FALSE)
p0 = rlnorm(n)
#p0=runif(n)
growthRates<-function(){rnorm(n,mean=1,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:100){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
p0=runif(n)
growthRates<-function(){rnorm(n,mean=1,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:100){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
gc()
gc()
setwd(paste0(Sys.getenv('CS_HOME'),'/Schools/SFICSSS2016/Tutorials/tisean'))
lorenz <- read.csv('lorenzR15.dat',sep='\t')
head(lorenz)
lorenz <- read.csv('lorenzR15.dat',sep='\t',header=FALSE)
head(lorenz)
names(lorenz)<-c("x","y","z")
colnames(lorenz)<-c("x","y","z")
dim(lorenz)
lorenz <- read.csv('lorenzR15.dat',sep='\t')
dim(lorenz)
lorenz <- read.csv('lorenzR15.dat',sep='\s')
lorenz <- read.csv('lorenzR15.csv',sep=';')
dim(lorenz)
colnames(lorenz)<-c("x","y","z")
plot(lorenz$x,lorenz$z)
plot(lorenz$y,lorenz$z)
lorenz <- read.csv('lorenzR45.csv',sep=';')
colnames(lorenz)<-c("x","y","z")
plot(lorenz$x,lorenz$z)
plot(lorenz$y,lorenz$z)
plot(lorenz$x,lorenz$z,type='l')
plot(lorenz$y,lorenz$z,type='l')
library(plot3d)
install.packages("plot3d")
install.packages("plot3D")
library(plot3D)
help("plot3D")
library(RTisean)
RTisean::d2(rnorm(100))
power<-read.csv('lorenzR15_spectrum.csv',sep=';')
head(power)
plot(power[,1],log(power[,2]))
plot(power[,1],log(power[,2]),type='l')
power<-read.csv('lorenzR45_spectrum.csv',sep=';')
plot(power[,1],log(power[,2]),type='l')
amplitude <- read.csv('amplitude.csv')
plot(1:length(amplitude),amplitude,type='l')
head(amplitude)
plot(1:nrow(amplitude),amplitude[,1],type='l')
